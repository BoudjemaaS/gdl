#!/bin/bash
#
# Script to download some files needed for mingw32.
#
# JP:
#  Since old packages are not available from msys2 repo, let's try the latest versions here.
#  If they doesn't work (especially readline), we need to keep them in another location.
#  Here are the list of libraries had to be 'reversioned' in the previous version of this script:
#   - readline, zlib, libpng, libpcre

me="appveyor_1.msys"

function log {
    echo "[${me}] $1"
}

function set_package {
    package_fullname="mingw-w64-${arch}-$1"
    package_file="${msys2_libs[$package_fullname]}"
    package_url="https://repo.msys2.org/mingw/${arch}/${package_file}"
}

function download_package {
    log "Downloading ${package_file}..."
    curl -O -s $package_url
    if [ $? -eq 1 ]; then
        log "Failed to download ${package_file}!"
        exit 1
    fi
}

function decompress_package {
    log "Decompressing ${package_file}..."
    #if [ ${package_file: -4} == ".zst" ]; then
    #    tar -I zstd -xf $package_file $@
    #else
    #    tar xf $package_file $@
    #fi
    tar xf $package_file $@
    if [ $? -eq 1 ]; then
        log "Failed to decompress ${package_file}!"
        exit 1
    fi
}

cd /c/projects/gdl

mname="mingw32"
arch="i686"
if [ -n "$MSYSTEM" ] ; then
  if [ "$MSYSTEM" = "MINGW64" ] ; then
    arch="x86_64"
    mname="mingw64"
  fi
fi

log "Architecture = ${arch}"

mkdir zstd
pushd zstd
zstd_version="v1.4.8"
if [ $arch == "i686" ]; then
    zstd_zip=zstd-${zstd_version}-win32.zip
else
    zstd_zip=zstd-${zstd_version}-win64.zip
fi
curl -LOs https://github.com/facebook/zstd/releases/download/${zstd_version}/${zstd_zip}
7z x ${zstd_zip}
mv zstd.exe /usr/bin/
popd

mkdir -p mingw
cd mingw

log "Downloading MSYS2 repository file..."
curl -O -s http://repo.msys2.org/mingw/${arch}/${mname}.files # This file has the version strings of the latest libraries.

declare -A msys2_libs
eval `tar --wildcards -xOf ${mname}.files \*/desc | awk '/%FILENAME%/{getline;fn=$0;getline;getline;getline;print "msys2_libs[\"" $0 "\"]+=\"" fn "\"";}'`

required=(
    "gsl"
    "readline"
    "gettext"
    "libiconv"
    "termcap"
    "libsystre"
    "libtre-git"
    "eigen3"
    "zlib"
    "libpng"
    "fftw"
    "shapelib"
    "expat"
    "xz"
    "libjpeg-turbo"
    "libtiff"
    "graphicsmagick"
    "bzip2"
    "fontconfig"
    "freetype"
    "lcms2"
    "libtool"
    "harfbuzz"
    "graphite2"
    "glib2"
    "pcre"
)

for package_name in ${required[@]}; do
    set_package $package_name
    download_package

    tar_options=""
    if [ $package_name == "graphicsmagick" ]; then
        mkdir -p gm
        tar_options="-C gm"
    fi

    decompress_package $tar_options

    if [ $package_name == "graphicsmagick" ]; then
        mv gm/${mname} ${package_name}-Q8
    fi
done

if [ ! "x${DOTIFF}" = "x" ] ; then
    set_package "proj"
    download_package
    decompress_package
    if [ ! "x${DOGEOTIFF}" = "x" ] ; then
        set_package "libgeotiff"
        download_package
        decompress_package
    fi
fi
