image: Visual Studio 2019
branches:
  only:
    - master
clone_folder: C:\projects\gdl
configuration:
  - Release
  - Debug
environment:
  matrix:
  - platform: x86_64
  - platform: i686
   
matrix:
  fast_finish: true
  
init:
  - git config --global core.autocrlf input

install:
  - ren "C:\Program Files\Git\usr\bin\sh.exe" _sh.exe
  - ps: |
      Start-FileDownload 'https://download.microsoft.com/download/B/2/E/B2EB83FE-98C2-4156-834A-E1711E6884FB/MSMpiSetup.exe'
      & MSMpiSetup.exe -unattend
      $env:Path += ";C:\Program Files\Microsoft MPI\Bin"
  - ps: |
      if ($env:platform -Match "i686") 
      {
        $env:MSYSTEM="MINGW32" ; $env:mname="mingw32" ; $env:arch="i686"
        $env:SIGNTOOL="C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x86\signtool.exe"
      }
      elseif ($env:platform -Match "x86_64") 
      {
        $env:MSYSTEM="MINGW64" ;  $env:mname="mingw64" ; $env:arch="x86_64"
        $env:SIGNTOOL="C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe"
      }
  - cmd: |
      C:\msys64\usr\bin\bash.exe -lc "sed -i s/^CheckSpace/#CheckSpace/g /etc/pacman.conf && pacman --noconfirm -Syuu --overwrite \*"
      C:\windows\system32\taskkill.exe /F /FI "MODULES eq msys-2.0.dll"
      C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -Suu --overwrite \*"
  - cmd: |
      if %platform% == i686 C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -S --needed --overwrite \* mingw-w64-i686-nsis base-devel binutils mingw-w64-i686-toolchain"
      if %platform% == x86_64 C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -S --needed --overwrite \* mingw-w64-x86_64-nsis base-devel binutils mingw-w64-x86_64-toolchain"
  - cmd: |
      cd C:\projects\gdl
      C:\msys64\usr\bin\bash.exe -lc "cd $OLDPWD && ./.ci/build_gdl_windows.msys prep"

build_script:
  - cmd: |
      cd C:\projects\gdl
      C:\msys64\usr\bin\bash.exe -lc "cd $OLDPWD && ./.ci/build_gdl_windows.msys build"

on_failure:
  - ps: cat C:\projects\build\testsuite\Testing\Temporary\LastTest.log

after_build:
  - cmd: |
      cd C:\projects\gdl
      C:\msys64\usr\bin\bash.exe -lc "cd $OLDPWD && ./.ci/build_gdl_windows.msys check" & exit 0
  - ps: |
      Add-Type -AssemblyName 'System.Web'
      $env:rawpwd = [System.Web.Security.Membership]::GeneratePassword(100, 50)
      $cert = New-SelfSignedCertificate -DnsName gnudatalanguage.github.io -CertStoreLocation cert:\LocalMachine\My -type CodeSigning
      $pwd = ConvertTo-SecureString -String "$env:rawpwd" -Force -AsPlainText
      Export-PfxCertificate -cert $cert -Password $pwd -FilePath C:\projects\gdlcert.pfx
  - cmd: |
      cd C:\projects\install
      "%SIGNTOOL%" sign /f C:\projects\gdlcert.pfx /p "%rawpwd%" gdl.exe
      7z a ..\gdl\gdl_build.zip *
      cd C:\projects\gdl
      copy C:\projects\package\gdlsetup.exe .
      "%SIGNTOOL%" sign /f C:\projects\gdlcert.pfx /p "%rawpwd%" gdlsetup.exe

artifacts:
  - path: gdl_build.zip
    name: GDL
  - path: gdlsetup.exe
    name: GDL installer

deploy:
  release: gdl-master-build$(appveyor_build_version)
  description: 'Test release'
  provider: GitHub
  auth_token:
    secure: IhTPN2ggVb/gSjAnDAGleGO8+QQJETWjbuNtAvwQcJgEzKcZK944bMDIxSuLASgw
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only

#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
